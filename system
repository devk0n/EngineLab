
  UniqueID particle_1 = m_system.addParticle(
    10.0,                    // Mass
    Vector3d(0.16, 0.25, 0.14)  // Position
  );

  UniqueID particle_2 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(-0.15, 0.27, 0.15)  // Position
  );

  UniqueID particle_3 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(0.005, 0.6, 0.12)   // Position
  );

  UniqueID particle_4 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(0.16, 0.25, 0.3)   // Position
  );

  UniqueID particle_5 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(-0.15, 0.27, 0.31)   // Position
  );

  UniqueID particle_6 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(-0.003, 0.58, 0.29)   // Position
  );

  UniqueID particle_7 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(-0.06, 0.58, 0.17)   // Position
  );

  UniqueID particle_8 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(-0.12, 0.2, 0.19)   // Position
  );

  UniqueID particle_9 = m_system.addParticle(
    10.0,                     // Mass
    Vector3d(0.0, 0.0, 2)   // Position
  );

  // Get particle pointers
  Particle *p1 = m_system.getParticle(particle_1);
  Particle *p2 = m_system.getParticle(particle_2);
  Particle *p3 = m_system.getParticle(particle_3);
  Particle *p4 = m_system.getParticle(particle_4);
  Particle *p5 = m_system.getParticle(particle_5);
  Particle *p6 = m_system.getParticle(particle_6);
  Particle *p7 = m_system.getParticle(particle_7);
  Particle *p8 = m_system.getParticle(particle_8);
  Particle *p9 = m_system.getParticle(particle_9);

  p1->setFixed(true);
  p2->setFixed(true);
  p4->setFixed(true);
  p5->setFixed(true);
  p8->setFixed(true);
  p9->setFixed(true);

  // Add a distance constraint between the particles
  auto constraint1 = std::make_shared<DistanceConstraint>(p1, p3);
  auto constraint2 = std::make_shared<DistanceConstraint>(p2, p3);
  auto constraint3 = std::make_shared<DistanceConstraint>(p3, p6);
  auto constraint4 = std::make_shared<DistanceConstraint>(p5, p6);
  auto constraint5 = std::make_shared<DistanceConstraint>(p4, p6);
  auto constraint6 = std::make_shared<DistanceConstraint>(p3, p7);
  auto constraint7 = std::make_shared<DistanceConstraint>(p6, p7);
  auto constraint8 = std::make_shared<DistanceConstraint>(p7, p8);

  Vector3d d = p6->getPosition() - p9->getPosition();
  double distance = d.norm();
  auto spring = std::make_shared<SpringForceGenerator>(p6, p9, distance,
                                                     500.0,   // Reduced stiffness
                                                     0.0);  // Increased damping
  m_system.addForceGenerator(spring);

  m_system.addConstraint(constraint1);
  m_system.addConstraint(constraint2);
  m_system.addConstraint(constraint3);
  m_system.addConstraint(constraint4);
  m_system.addConstraint(constraint5);
  m_system.addConstraint(constraint6);
  m_system.addConstraint(constraint7);
  m_system.addConstraint(constraint8);

  // Add gravity as force generator
  auto gravityGen = std::make_shared<GravityForceGenerator>(Vector3d(0, 0, -9.81));
  for (auto& particle : {p1, p2, p3, p4, p5, p6, p7, p8, p9}) {
    gravityGen->addParticle(particle);
  }
  m_system.addForceGenerator(gravityGen);

